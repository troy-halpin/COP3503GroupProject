/********************************************************************
	
	The czechUser Methods

	These methods take care of the interim between the User class
	and the main function, created primarily for code organization
	and ease of class communication. The methods are overloaded
	for different methodology between new and existing users, much
	like the constructors of the User class. They handle calling the
	functions for checking username availability and existance, 
	reading the user information from the database, initializing the 
	User for the main, creating the User's bank accounts, and 
	determining password correctness.

*********************************************************************
*/

#include "User.h"
#include "FileManage.h"
#include <stdexcept>
#include <string>

User* czechUser(string realName, string userName, string password, string accountName) // new user
{
	bool userExists = false;
	FileManage manager;

	// read file to see if username exists
	userExists = manager.findUsername();

	if (!userExists)
	{
		// use the new user constructor
		User* currentUser = new User(realName, userName, password);

		// create default bank account
		currentUser->createAccount(accountName);

		return currentUser;
	}
	else // another user has already claimed the username
	{
		throw invalid_argument("This username is unavailable.");
	}
}

User* czechUser(string userNameInput, string passwordInput) // existing user
{
	bool userExists = false;
	string password, realName, realPassword, userSalt, accName1, accName2, accName3, bal1, bal2, bal3;
	FileManage manager;

	// read file to see if username exists
	userExists = manager.findUsername(userNameInput);

	if (userExists)
	{
		// read in real password, real name, and user salt
		manager.readFile(userNameInput, &realPassword, &realName, &userSalt, &accName1, &bal1, &accName2, &bal2, &accName3, &bal3);

		User* currentUser = new User(realName, userNameInput, realPassword, userSalt, passwordInput);

		if (currentUser->correctPassword())
		{
			currentUser->takeAccountsOnline(accName1, accName2, accName3, bal1, bal2, bal3);

			return currentUser;
		}
		else
		{
			throw invalid_argument("You have entered an incorrect password.");
		}
	}
	else
	{
		throw invalid_argument("This username does not exist.");
	}
}
